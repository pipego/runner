// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: server/proto/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ServerProto_SendTask_FullMethodName   = "/runner.ServerProto/SendTask"
	ServerProto_SendGlance_FullMethodName = "/runner.ServerProto/SendGlance"
	ServerProto_SendMaint_FullMethodName  = "/runner.ServerProto/SendMaint"
	ServerProto_SendConfig_FullMethodName = "/runner.ServerProto/SendConfig"
)

// ServerProtoClient is the client API for ServerProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerProtoClient interface {
	SendTask(ctx context.Context, opts ...grpc.CallOption) (ServerProto_SendTaskClient, error)
	SendGlance(ctx context.Context, opts ...grpc.CallOption) (ServerProto_SendGlanceClient, error)
	SendMaint(ctx context.Context, opts ...grpc.CallOption) (ServerProto_SendMaintClient, error)
	SendConfig(ctx context.Context, opts ...grpc.CallOption) (ServerProto_SendConfigClient, error)
}

type serverProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewServerProtoClient(cc grpc.ClientConnInterface) ServerProtoClient {
	return &serverProtoClient{cc}
}

func (c *serverProtoClient) SendTask(ctx context.Context, opts ...grpc.CallOption) (ServerProto_SendTaskClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerProto_ServiceDesc.Streams[0], ServerProto_SendTask_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serverProtoSendTaskClient{ClientStream: stream}
	return x, nil
}

type ServerProto_SendTaskClient interface {
	Send(*TaskRequest) error
	Recv() (*TaskReply, error)
	grpc.ClientStream
}

type serverProtoSendTaskClient struct {
	grpc.ClientStream
}

func (x *serverProtoSendTaskClient) Send(m *TaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverProtoSendTaskClient) Recv() (*TaskReply, error) {
	m := new(TaskReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverProtoClient) SendGlance(ctx context.Context, opts ...grpc.CallOption) (ServerProto_SendGlanceClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerProto_ServiceDesc.Streams[1], ServerProto_SendGlance_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serverProtoSendGlanceClient{ClientStream: stream}
	return x, nil
}

type ServerProto_SendGlanceClient interface {
	Send(*GlanceRequest) error
	Recv() (*GlanceReply, error)
	grpc.ClientStream
}

type serverProtoSendGlanceClient struct {
	grpc.ClientStream
}

func (x *serverProtoSendGlanceClient) Send(m *GlanceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverProtoSendGlanceClient) Recv() (*GlanceReply, error) {
	m := new(GlanceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverProtoClient) SendMaint(ctx context.Context, opts ...grpc.CallOption) (ServerProto_SendMaintClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerProto_ServiceDesc.Streams[2], ServerProto_SendMaint_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serverProtoSendMaintClient{ClientStream: stream}
	return x, nil
}

type ServerProto_SendMaintClient interface {
	Send(*MaintRequest) error
	Recv() (*MaintReply, error)
	grpc.ClientStream
}

type serverProtoSendMaintClient struct {
	grpc.ClientStream
}

func (x *serverProtoSendMaintClient) Send(m *MaintRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverProtoSendMaintClient) Recv() (*MaintReply, error) {
	m := new(MaintReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverProtoClient) SendConfig(ctx context.Context, opts ...grpc.CallOption) (ServerProto_SendConfigClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerProto_ServiceDesc.Streams[3], ServerProto_SendConfig_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serverProtoSendConfigClient{ClientStream: stream}
	return x, nil
}

type ServerProto_SendConfigClient interface {
	Send(*ConfigRequest) error
	Recv() (*ConfigReply, error)
	grpc.ClientStream
}

type serverProtoSendConfigClient struct {
	grpc.ClientStream
}

func (x *serverProtoSendConfigClient) Send(m *ConfigRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverProtoSendConfigClient) Recv() (*ConfigReply, error) {
	m := new(ConfigReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerProtoServer is the server API for ServerProto service.
// All implementations must embed UnimplementedServerProtoServer
// for forward compatibility
type ServerProtoServer interface {
	SendTask(ServerProto_SendTaskServer) error
	SendGlance(ServerProto_SendGlanceServer) error
	SendMaint(ServerProto_SendMaintServer) error
	SendConfig(ServerProto_SendConfigServer) error
	mustEmbedUnimplementedServerProtoServer()
}

// UnimplementedServerProtoServer must be embedded to have forward compatible implementations.
type UnimplementedServerProtoServer struct {
}

func (UnimplementedServerProtoServer) SendTask(ServerProto_SendTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}
func (UnimplementedServerProtoServer) SendGlance(ServerProto_SendGlanceServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGlance not implemented")
}
func (UnimplementedServerProtoServer) SendMaint(ServerProto_SendMaintServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMaint not implemented")
}
func (UnimplementedServerProtoServer) SendConfig(ServerProto_SendConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method SendConfig not implemented")
}
func (UnimplementedServerProtoServer) mustEmbedUnimplementedServerProtoServer() {}

// UnsafeServerProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerProtoServer will
// result in compilation errors.
type UnsafeServerProtoServer interface {
	mustEmbedUnimplementedServerProtoServer()
}

func RegisterServerProtoServer(s grpc.ServiceRegistrar, srv ServerProtoServer) {
	s.RegisterService(&ServerProto_ServiceDesc, srv)
}

func _ServerProto_SendTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerProtoServer).SendTask(&serverProtoSendTaskServer{ServerStream: stream})
}

type ServerProto_SendTaskServer interface {
	Send(*TaskReply) error
	Recv() (*TaskRequest, error)
	grpc.ServerStream
}

type serverProtoSendTaskServer struct {
	grpc.ServerStream
}

func (x *serverProtoSendTaskServer) Send(m *TaskReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverProtoSendTaskServer) Recv() (*TaskRequest, error) {
	m := new(TaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServerProto_SendGlance_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerProtoServer).SendGlance(&serverProtoSendGlanceServer{ServerStream: stream})
}

type ServerProto_SendGlanceServer interface {
	Send(*GlanceReply) error
	Recv() (*GlanceRequest, error)
	grpc.ServerStream
}

type serverProtoSendGlanceServer struct {
	grpc.ServerStream
}

func (x *serverProtoSendGlanceServer) Send(m *GlanceReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverProtoSendGlanceServer) Recv() (*GlanceRequest, error) {
	m := new(GlanceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServerProto_SendMaint_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerProtoServer).SendMaint(&serverProtoSendMaintServer{ServerStream: stream})
}

type ServerProto_SendMaintServer interface {
	Send(*MaintReply) error
	Recv() (*MaintRequest, error)
	grpc.ServerStream
}

type serverProtoSendMaintServer struct {
	grpc.ServerStream
}

func (x *serverProtoSendMaintServer) Send(m *MaintReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverProtoSendMaintServer) Recv() (*MaintRequest, error) {
	m := new(MaintRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServerProto_SendConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerProtoServer).SendConfig(&serverProtoSendConfigServer{ServerStream: stream})
}

type ServerProto_SendConfigServer interface {
	Send(*ConfigReply) error
	Recv() (*ConfigRequest, error)
	grpc.ServerStream
}

type serverProtoSendConfigServer struct {
	grpc.ServerStream
}

func (x *serverProtoSendConfigServer) Send(m *ConfigReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverProtoSendConfigServer) Recv() (*ConfigRequest, error) {
	m := new(ConfigRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerProto_ServiceDesc is the grpc.ServiceDesc for ServerProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runner.ServerProto",
	HandlerType: (*ServerProtoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTask",
			Handler:       _ServerProto_SendTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendGlance",
			Handler:       _ServerProto_SendGlance_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMaint",
			Handler:       _ServerProto_SendMaint_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendConfig",
			Handler:       _ServerProto_SendConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server/proto/server.proto",
}
